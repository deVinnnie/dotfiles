#!/usr/bin/env ruby

# Imports
###############################################################################
require 'open-uri'
require 'json'
require 'yaml'
require 'uri'



# Helper function
###############################################################################
def download_json(uri)
  begin
    res = open(uri.to_s)
    return JSON.parse(res.read)

  rescue OpenURI::HTTPError
    return nil
  end
end

def get_repo_from_json(json, search_name, repo_property_name)
  json.each do |repo|
    if repo['name'].downcase == search_name
        puts repo[repo_property_name]
        exit 0 # Stop execution if repo is found
    end
  end
end

def get_gitlab_projects_json(repo, search_name)
  querystring = 'private_token=' << repo['private_token'] << '&search=' << search_name
  uri = URI::HTTPS.build({
    :host => repo['host'],
    :path => '/api/v3/projects',
    :query => querystring
    })

  download_json(uri)
end

def get_github_projects_json(repo, search_name)
  uri = URI::HTTPS.build({
    :host => 'api.github.com',
    :path => '/users/' << repo['username'] << '/repos'
    })

  download_json(uri)
end

def read_config
  # See https://stackoverflow.com/questions/4474918/file-expand-path-gemfile-file-how-does-this-work-where-is-the-fil#4479926
  config_path = File.expand_path("~/repos.yaml", File.dirname(__FILE__))
  begin
    return YAML.load_file(config_path)
  rescue Errno::ENOENT
    exit 3 # No config, no repo
  end
end



# Main
###############################################################################
# See https://stackoverflow.com/questions/4474918/file-expand-path-gemfile-file-how-does-this-work-where-is-the-fil#4479926
yaml_config = read_config()
search_term = ARGV[0].downcase

yaml_config['repositories'].each do |repo|
  if repo['type'] == 'gitlab'
    gitlab_json = get_gitlab_projects_json(repo, search_term)
    get_repo_from_json(gitlab_json, search_term, 'ssh_url_to_repo') if gitlab_json

  elsif repo['type'] == 'github'
    github_json = get_github_projects_json(repo, search_term)
    get_repo_from_json(github_json, search_term, 'ssh_url') if github_json
  end
end

# Exit with error status if this point is reached
exit 1
